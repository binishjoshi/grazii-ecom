{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionsStart = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    console.log('Fetching');\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess());\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["/home/phoenix/grazii-ecom/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","collectionsMap","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","console","log","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAO,MAAMC,qBAAqB,GAAIC,cAAD,KAAqB;AACzDC,EAAAA,IAAI,EAAEL,eAAe,CAACM;AADmC,CAArB,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGH,cAAc,KAAK;AACzDC,EAAAA,IAAI,EAAEL,eAAe,CAACQ,yBADmC;AAEzDC,EAAAA,OAAO,EAAEL;AAFgD,CAAL,CAA9C;AAKP,OAAO,MAAMM,uBAAuB,GAAGC,YAAY,KAAK;AACvDN,EAAAA,IAAI,EAAEL,eAAe,CAACY,yBADiC;AAEvDH,EAAAA,OAAO,EAAEE;AAF8C,CAAL,CAA5C;AAKP,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC/C,SAAOC,QAAQ,IAAI;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMC,aAAa,GAAGhB,SAAS,CAACiB,UAAV,CAAqB,aAArB,CAAtB;AACAJ,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AAEAc,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACpC,YAAMjB,cAAc,GAAGF,+BAA+B,CAACmB,QAAD,CAAtD;AACAP,MAAAA,QAAQ,CAACP,uBAAuB,EAAxB,CAAR;AACA,KAHD,EAGGe,KAHH,CAGSC,KAAK,IAAIT,QAAQ,CAACJ,uBAAuB,CAACa,KAAK,CAACC,OAAP,CAAxB,CAH1B;AAIA,GATD;AAUA,CAXM","sourcesContent":["import ShopActionTypes from './shop.types';\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nexport const fetchCollectionsStart = (collectionsMap) => ({\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_START,\n});\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n\tpayload: collectionsMap\n});\n\nexport const fetchCollectionsFailure = errorMessage => ({\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n\tpayload: errorMessage\n})\n\nexport const fetchCollectionsStartAsync = () => {\n\treturn dispatch => {\n\t\tconsole.log('Fetching');\n\t\tconst collectionRef = firestore.collection('collections');\n\t\tdispatch(fetchCollectionsStart());\n\n\t\tcollectionRef.get().then(snapshot => {\n\t\t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n\t\t\tdispatch(fetchCollectionsSuccess());\n\t\t}).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\t}\n};\n\n"]},"metadata":{},"sourceType":"module"}