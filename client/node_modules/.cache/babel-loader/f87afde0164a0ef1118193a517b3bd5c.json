{"ast":null,"code":"var _jsxFileName = \"/home/phoenix/grazii-ecom/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport CollectionPage from '../../pages/collection/collection.component';\nimport CollectionOverview from '../../components/collection-overview/collection-overview.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport { selectIsCollectionFetching } from '../redux/shop/shop.selectors';\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    const fetchCollectionsStartAsync = this.props.fetchCollectionsStartAsync;\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    const _this$props = this.props,\n          match = _this$props.match,\n          isCollectionFetching = _this$props.isCollectionFetching;\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/home/phoenix/grazii-ecom/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","createStructuredSelector","CollectionPage","CollectionOverview","WithSpinner","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStartAsync","selectIsCollectionFetching","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionFetching","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,OAAOC,cAAP,MAA2B,6CAA3B;AACA,OAAOC,kBAAP,MAA+B,oEAA/B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AAEA,MAAMC,6BAA6B,GAAGL,WAAW,CAACD,kBAAD,CAAjD;AACA,MAAMO,yBAAyB,GAAGN,WAAW,CAACF,cAAD,CAA7C;;AAEA,MAAMS,QAAN,SAAuBb,KAAK,CAACc,SAA7B,CAAuC;AACtCC,EAAAA,iBAAiB,GAAG;AAAA,UACXN,0BADW,GACoB,KAAKO,KADzB,CACXP,0BADW;AAEnBA,IAAAA,0BAA0B;AAC1B;;AAEDQ,EAAAA,MAAM,GAAG;AAAA,wBACgC,KAAKD,KADrC;AAAA,UACAE,KADA,eACAA,KADA;AAAA,UACOC,oBADP,eACOA,oBADP;AAER,WACG;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AACC,MAAA,KAAK,MADN;AAEC,MAAA,IAAI,EAAG,GAAED,KAAK,CAACE,IAAK,EAFrB;AAGC,MAAA,MAAM,EACJJ,KAAD,IACA,oBAAC,6BAAD;AAA+B,QAAA,SAAS,EAAGG;AAA3C,SAAsEH,KAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAQI,oBAAC,KAAD;AACC,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,gBADrB;AAEC,MAAA,MAAM,EACJJ,KAAD,IACA,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAGG;AAAvC,SAAkEH,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,CADH;AAiBA;;AAzBqC;;AA4BvC,MAAMK,eAAe,GAAGlB,wBAAwB,CAAC;AAChDgB,EAAAA,oBAAoB,EAAET;AAD0B,CAAD,CAAhD;;AAIA,MAAMY,kBAAkB,GAAGC,QAAQ,KAAK;AACvCd,EAAAA,0BAA0B,EAAE,MAAMc,QAAQ,CAACd,0BAA0B,EAA3B;AADH,CAAL,CAAnC;;AAIA,eAAeP,OAAO,CAACmB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CT,QAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport CollectionPage from '../../pages/collection/collection.component';\nimport CollectionOverview from '../../components/collection-overview/collection-overview.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport { selectIsCollectionFetching } from '../redux/shop/shop.selectors';\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n\tcomponentDidMount() {\n\t\tconst { fetchCollectionsStartAsync } = this.props;\n\t\tfetchCollectionsStartAsync();\n\t}\n\n\trender() {\n\t\tconst { match, isCollectionFetching } = this.props;\n\t\treturn (\n\t    <div className='shop-page'>\n\t        <Route \n\t        \texact \n\t        \tpath={`${match.path}`} \n\t        \trender={\n\t        \t\t(props) => \n\t        \t\t<CollectionOverviewWithSpinner isLoading={ isCollectionFetching } {...props}/> } \n\t        />\n\t        <Route \n\t        \tpath={`${match.path}/:collectionId`} \n\t        \trender={\n\t        \t\t(props) => \n\t        \t\t<CollectionPageWithSpinner isLoading={ isCollectionFetching } {...props} /> } \n\t        />\n\t    </div>\n\t\t);\n\t}\n} \n\nconst mapStateToProps = createStructuredSelector({\n\tisCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n\tfetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}